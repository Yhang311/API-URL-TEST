{"ast":null,"code":"var _jsxFileName = \"/Users/yanghang/test/react-test/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport fetch_token from './token_info.js'; // 导入 fetch_token 函数\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const username = \"1245219\";\n  useEffect(() => {\n    // 调用 fetch_token 函数并传递 username 和 team 参数\n    fetch_token(username, \"울산\");\n  }, [username]); // 当 username 变化时重新调用\n\n  // 获取存储在 localStorage 中的 token 和消息\n  const token = localStorage.getItem(`${username}_access_token`);\n  const message = localStorage.getItem(`${username}_msg`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Token: \", token || \"No token available\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Message: \", message || \"No message available\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\n\n// const [data, setData] = useState(null);\n// const [error, setError] = useState(null); \n\n// const handleClick = async () => {\n//   try {\n//     //const response = await fetch('https://jsonplaceholder.typicode.com/posts');//온라인에서 찾은 테스트 API URL  \n//     const response = await fetch('http://220.88.39.23:5000/api/user/token?username=awdfsv&team=%EC%9A%B8%EC%82%B0');//우리의 API URL\n\n//     if (!response.ok) {\n//       throw new Error(`网络请求失败，状态码：${response.status}`);\n//     }\n//     const result = await response.json(); \n//     setData(result);\n//     setError(null); \n//   } catch (err) {\n//     console.error('error:', err);\n//     setError(err.message); \n//   }\n// };\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","fetch_token","jsxDEV","_jsxDEV","App","_s","username","token","localStorage","getItem","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yanghang/test/react-test/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport fetch_token from './token_info.js'; // 导入 fetch_token 函数\n\nfunction App() {\n    const username = \"1245219\";\n\n    useEffect(() => {\n        // 调用 fetch_token 函数并传递 username 和 team 参数\n        fetch_token(username, \"울산\");\n    }, [username]); // 当 username 变化时重新调用\n\n    // 获取存储在 localStorage 中的 token 和消息\n    const token = localStorage.getItem(`${username}_access_token`);\n    const message = localStorage.getItem(`${username}_msg`);\n\n    return (\n        <div>\n            <h3>Information</h3>\n            <p>Token: {token || \"No token available\"}</p>\n            <p>Message: {message || \"No message available\"}</p>\n        </div>\n    );\n}\n\nexport default App;\n\n\n\n\n  // const [data, setData] = useState(null);\n  // const [error, setError] = useState(null); \n\n  // const handleClick = async () => {\n  //   try {\n  //     //const response = await fetch('https://jsonplaceholder.typicode.com/posts');//온라인에서 찾은 테스트 API URL  \n  //     const response = await fetch('http://220.88.39.23:5000/api/user/token?username=awdfsv&team=%EC%9A%B8%EC%82%B0');//우리의 API URL\n      \n  //     if (!response.ok) {\n  //       throw new Error(`网络请求失败，状态码：${response.status}`);\n  //     }\n  //     const result = await response.json(); \n  //     setData(result);\n  //     setError(null); \n  //   } catch (err) {\n  //     console.error('error:', err);\n  //     setError(err.message); \n  //   }\n  // };\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,WAAW,MAAM,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAMC,QAAQ,GAAG,SAAS;EAE1BN,SAAS,CAAC,MAAM;IACZ;IACAC,WAAW,CAACK,QAAQ,EAAE,IAAI,CAAC;EAC/B,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,GAAGH,QAAQ,eAAe,CAAC;EAC9D,MAAMI,OAAO,GAAGF,YAAY,CAACC,OAAO,CAAC,GAAGH,QAAQ,MAAM,CAAC;EAEvD,oBACIH,OAAA;IAAAQ,QAAA,gBACIR,OAAA;MAAAQ,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBZ,OAAA;MAAAQ,QAAA,GAAG,SAAO,EAACJ,KAAK,IAAI,oBAAoB;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7CZ,OAAA;MAAAQ,QAAA,GAAG,WAAS,EAACD,OAAO,IAAI,sBAAsB;IAAA;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEd;AAACV,EAAA,CAnBQD,GAAG;AAAAY,EAAA,GAAHZ,GAAG;AAqBZ,eAAeA,GAAG;;AAKhB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}