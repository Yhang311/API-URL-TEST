{"ast":null,"code":"var _jsxFileName = \"/Users/yanghang/test/react-test/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport fetch_token from './fetch_token.js'; // 导入 fetch_token 函数\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const username = \"test07\"; // 假设的用户名\n  const team = \"김천\"; // 假设的团队名\n  const [token, setToken] = useState('');\n  const [Local_token, setLocalToken] = useState(localStorage.getItem('token') || '');\n  const [Local_name, setLocalName] = useState(localStorage.getItem('username') || '');\n  const [Local_team, setLocalTeam] = useState(localStorage.getItem('team') || '');\n  useEffect(() => {\n    const getTokenInfo = async () => {\n      // 如果用户名或团队不同，则重新获取 token\n      if (username !== Local_name || team !== Local_team) {\n        const fetchedToken = await fetch_token(username, team);\n        setToken(fetchedToken);\n        setLocalToken(fetchedToken);\n        setLocalName(username);\n        setLocalTeam(team);\n\n        // 存储到 localStorage 以便下次使用\n        localStorage.setItem('token', fetchedToken);\n        localStorage.setItem('username', username);\n        localStorage.setItem('team', team);\n      } else {\n        // 使用存储的 token\n        setToken(Local_token);\n      }\n    };\n    getTokenInfo(); // 调用获取 token 的函数\n  }, [username, team, Local_name, Local_team, Local_token]); // 依赖项列表\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Token: \", token]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Past Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"8DAWa4q7LbKtxbRDClIBMPkOVXc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","fetch_token","jsxDEV","_jsxDEV","App","_s","username","team","token","setToken","Local_token","setLocalToken","localStorage","getItem","Local_name","setLocalName","Local_team","setLocalTeam","getTokenInfo","fetchedToken","setItem","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yanghang/test/react-test/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport fetch_token from './fetch_token.js'; // 导入 fetch_token 函数\n\nconst App = () => {\n  const username = \"test07\"; // 假设的用户名\n  const team = \"김천\"; // 假设的团队名\n  const [token, setToken] = useState('');\n  const [Local_token, setLocalToken] = useState(localStorage.getItem('token') || '');\n  const [Local_name, setLocalName] = useState(localStorage.getItem('username') || '');\n  const [Local_team, setLocalTeam] = useState(localStorage.getItem('team') || '');\n\n  useEffect(() => {\n    const getTokenInfo = async () => {\n      // 如果用户名或团队不同，则重新获取 token\n      if (username !== Local_name || team !== Local_team) {\n        const fetchedToken = await fetch_token(username, team);\n        setToken(fetchedToken);\n        setLocalToken(fetchedToken);\n        setLocalName(username);\n        setLocalTeam(team);\n        \n        // 存储到 localStorage 以便下次使用\n        localStorage.setItem('token', fetchedToken);\n        localStorage.setItem('username', username);\n        localStorage.setItem('team', team);\n      } else {\n        // 使用存储的 token\n        setToken(Local_token);\n      }\n    };\n    getTokenInfo(); // 调用获取 token 的函数\n  }, [username, team, Local_name, Local_team, Local_token]); // 依赖项列表\n\n  return (\n    <div>\n      <h3>Information</h3>\n      <p>Token: {token}</p>\n\n      <h3>Past Events</h3>\n      {/* 在这里可以添加其他的组件或逻辑来处理过去的事件 */}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAMC,QAAQ,GAAG,QAAQ,CAAC,CAAC;EAC3B,MAAMC,IAAI,GAAG,IAAI,CAAC,CAAC;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,WAAW,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAACY,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;EAClF,MAAM,CAACC,UAAU,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAACY,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;EACnF,MAAM,CAACG,UAAU,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAACY,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;EAE/Ed,SAAS,CAAC,MAAM;IACd,MAAMmB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B;MACA,IAAIZ,QAAQ,KAAKQ,UAAU,IAAIP,IAAI,KAAKS,UAAU,EAAE;QAClD,MAAMG,YAAY,GAAG,MAAMlB,WAAW,CAACK,QAAQ,EAAEC,IAAI,CAAC;QACtDE,QAAQ,CAACU,YAAY,CAAC;QACtBR,aAAa,CAACQ,YAAY,CAAC;QAC3BJ,YAAY,CAACT,QAAQ,CAAC;QACtBW,YAAY,CAACV,IAAI,CAAC;;QAElB;QACAK,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAED,YAAY,CAAC;QAC3CP,YAAY,CAACQ,OAAO,CAAC,UAAU,EAAEd,QAAQ,CAAC;QAC1CM,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEb,IAAI,CAAC;MACpC,CAAC,MAAM;QACL;QACAE,QAAQ,CAACC,WAAW,CAAC;MACvB;IACF,CAAC;IACDQ,YAAY,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,EAAE,CAACZ,QAAQ,EAAEC,IAAI,EAAEO,UAAU,EAAEE,UAAU,EAAEN,WAAW,CAAC,CAAC,CAAC,CAAC;;EAE3D,oBACEP,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBtB,OAAA;MAAAkB,QAAA,GAAG,SAAO,EAACb,KAAK;IAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAErBtB,OAAA;MAAAkB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEjB,CAAC;AAEV,CAAC;AAACpB,EAAA,CAvCID,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAyCT,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}