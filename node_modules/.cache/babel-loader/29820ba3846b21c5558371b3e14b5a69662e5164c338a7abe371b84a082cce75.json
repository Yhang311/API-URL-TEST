{"ast":null,"code":"var _jsxFileName = \"/Users/yanghang/test/react-test/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport fetch_token from './fetch_token.js'; // 导入 fetch_token 函数\nimport fetch_calendar from './calendar.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const username = \"1wadadwa5219\"; // 当前用户名\n  const team = \"울산\"; // 当前团队\n  const [calendarData, setCalendarData] = useState([]);\n\n  // 这个 effect 用于获取 token\n  useEffect(() => {\n    const Local_username = localStorage.getItem('username');\n    const Local_team = localStorage.getItem('team');\n    const token = localStorage.getItem('access_token');\n\n    // 检查当前用户是否与本地存储的用户一致\n    if (username !== Local_username || team !== Local_team || !token) {\n      // 如果不一致，调用 fetch_token\n      fetch_token(username, team).then(() => {\n        const newToken = localStorage.getItem('access_token');\n        // 使用新获取的 token 来获取日历数据\n        fetch_calendar(newToken).then(data => {\n          setCalendarData(data); // 存储获取到的数据\n        });\n      });\n    } else {\n      // 如果一致，直接使用本地存储的 token 获取日历数据\n      fetch_calendar(token).then(data => {\n        setCalendarData(data); // 存储获取到的数据\n      });\n    }\n  }, [username, team]); // 依赖项数组中的 username 和 team\n\n  const token = localStorage.getItem('access_token');\n  const message = localStorage.getItem('msg');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Token: \", token || \"No token available\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Message: \", message || \"No message available\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Past Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: calendarData.map(event => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\" \", event.title, \" - \", event.date, \" \"]\n      }, event.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"xG1tT1JBFeAMNv3A+IdaV/mx3MM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","fetch_token","fetch_calendar","jsxDEV","_jsxDEV","App","_s","username","team","calendarData","setCalendarData","Local_username","localStorage","getItem","Local_team","token","then","newToken","data","message","children","fileName","_jsxFileName","lineNumber","columnNumber","map","event","title","date","id","_c","$RefreshReg$"],"sources":["/Users/yanghang/test/react-test/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport fetch_token from './fetch_token.js'; // 导入 fetch_token 函数\nimport fetch_calendar from './calendar.js';\n\nfunction App() {\n    const username = \"1wadadwa5219\"; // 当前用户名\n    const team = \"울산\"; // 当前团队\n    const [calendarData, setCalendarData] = useState([]); \n\n    // 这个 effect 用于获取 token\n    useEffect(() => {\n        const Local_username = localStorage.getItem('username');\n        const Local_team = localStorage.getItem('team');\n        const token = localStorage.getItem('access_token');\n\n        // 检查当前用户是否与本地存储的用户一致\n        if (username !== Local_username || team !== Local_team || !token) {\n            // 如果不一致，调用 fetch_token\n            fetch_token(username, team).then(() => {\n                const newToken = localStorage.getItem('access_token');\n                // 使用新获取的 token 来获取日历数据\n                fetch_calendar(newToken).then(data => {\n                    setCalendarData(data); // 存储获取到的数据\n                });\n            });\n        } else {\n            // 如果一致，直接使用本地存储的 token 获取日历数据\n            fetch_calendar(token).then(data => {\n                setCalendarData(data); // 存储获取到的数据\n            });\n        }\n    }, [username, team]); // 依赖项数组中的 username 和 team\n\n    const token = localStorage.getItem('access_token');\n    const message = localStorage.getItem('msg');\n\n    return (\n        <div>\n            <h3>Information</h3>\n            <p>Token: {token || \"No token available\"}</p>\n            <p>Message: {message || \"No message available\"}</p>\n\n            <h3>Past Events</h3>\n            <ul>\n                {calendarData.map(event => (\n                    <li key={event.id}> {/* 假设每个事件都有一个唯一的 id */}\n                        {event.title} - {event.date} {/* 假设事件有 title 和 date 字段 */}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}